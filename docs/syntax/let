func gen() {
  let n = 10;
  println("gen: {n=}");
}

func fn(n: ref any) {
  println("fn: {n=}");
  gen();
  println("fn: {n=}");
}

n = 17;
println("global: {n=}");
fn(n);
println("global: {n=}");

// Without "let", assigning to `n` in `gen` would overwrite the global `n` as it is passed by reference to `fn`, so when `n` is referenced in `gen`, it acts as a reference to the global `n`
// With "let", a local `n` is created, which is references instead of the global `n` reference

// Multiple variables on one line
let [a, b];
let {b, c};
// See programs/tests/unpacking for more